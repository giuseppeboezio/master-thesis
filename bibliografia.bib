@article{10.1145/155360.155362,
author = {Colmerauer, Alain and Roussel, Philippe},
title = {The Birth of Prolog},
year = {1993},
issue_date = {March 1993},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {28},
number = {3},
issn = {0362-1340},
url = {https://doi.org/10.1145/155360.155362},
doi = {10.1145/155360.155362},
abstract = {The programming language, Prolog, was born of a project aimed not at producing a programming language but at processing natural languages; in this case, French. The project gave rise to a preliminary version of Prolog at the end of 1971 and a more definitive version at the end of 1972. This article gives the history of this project and describes in detail the preliminary and then the final versions of Prolog. The authors also felt it appropriate to describe the Q-systems since it was a language which played a prominent part in Prolog's genesis.},
journal = {SIGPLAN Not.},
month = {mar},
pages = {37–52},
numpages = {16}
}

@article{coelho1986automated,
  title={Automated reasoning in geometry theorem proving with Prolog},
  author={Coelho, Helder and Pereira, Luis Moniz},
  journal={Journal of Automated Reasoning},
  volume={2},
  number={4},
  pages={329--390},
  year={1986},
  publisher={Springer}
}

@book{merritt2012building,
  title={Building expert systems in Prolog},
  author={Merritt, Dennis},
  year={2012},
  publisher={Springer Science \& Business Media}
}

@article{gelfond2002logic,
  title={Logic programming and knowledge representation—the A-Prolog perspective},
  author={Gelfond, Michael and Leone, Nicola},
  journal={Artificial Intelligence},
  volume={138},
  number={1-2},
  pages={3--38},
  year={2002},
  publisher={Elsevier}
}

@article{pinna2015resolving,
  title={Resolving model inconsistencies using automated regression planning},
  author={Pinna Puissant, Jorge and Van Der Straeten, Ragnhild and Mens, Tom},
  journal={Software \& Systems Modeling},
  volume={14},
  number={1},
  pages={461--481},
  year={2015},
  publisher={Springer}
}

@article{lally2011natural,
  title={Natural language processing with prolog in the ibm watson system},
  author={Lally, Adam and Fodor, Paul},
  journal={The Association for Logic Programming (ALP) Newsletter},
  volume={9},
  year={2011}
}

@inproceedings{Clocksin1987ProgrammingIP,
  title={Programming in Prolog},
  author={W. F. Clocksin and Chris Mellish},
  booktitle={Springer Berlin Heidelberg},
  year={1987}
}

@inproceedings{Gallier1985LogicFC,
  title={Logic for Computer Science: Foundations of Automatic Theorem Proving},
  author={Jean H. Gallier},
  year={1985}
}

@article{CIATTO2021100817,
title = {2P-Kt: A logic-based ecosystem for symbolic AI},
journal = {SoftwareX},
volume = {16},
pages = {100817},
year = {2021},
issn = {2352-7110},
doi = {https://doi.org/10.1016/j.softx.2021.100817},
url = {https://www.sciencedirect.com/science/article/pii/S2352711021001126},
author = {Giovanni Ciatto and Roberta Calegari and Andrea Omicini},
keywords = {Logic programming, Artificial intelligence, Prolog, Kotlin, Prolog},
abstract = {To date, logic-based technologies are either built on top or as extensions of the Prolog language, mostly working as monolithic solutions tailored upon specific inference procedures, unification mechanisms, or knowledge representation techniques. Instead, to maximise their impact, logic-based technologies should support and enable the general-purpose exploitation of all the manifold contributions from logic programming. Accordingly, we present 2P-Kt, a reboot of the tuProlog project offering a general, extensible, and interoperable ecosystem for logic programming and symbolic AI.}
}

@book{10.5555/2843512,
author = {Rossi, Francesca and van Beek, Peter and Walsh, Toby},
title = {Handbook of Constraint Programming},
year = {2006},
isbn = {9780080463803},
publisher = {Elsevier Science Inc.},
address = {USA},
abstract = {Constraint programming is a powerful paradigm for solving combinatorial search problems that draws on a wide range of techniques from artificial intelligence, computer science, databases, programming languages, and operations research. Constraint programming is currently applied with success to many domains, such as scheduling, planning, vehicle routing, configuration, networks, and bioinformatics. The aim of this handbook is to capture the full breadth and depth of the constraint programming field and to be encyclopedic in its scope and coverage. While there are several excellent books on constraint programming, such books necessarily focus on the main notions and techniques and cannot cover also extensions, applications, and languages. The handbook gives a reasonably complete coverage of all these lines of work, based on constraint programming, so that a reader can have a rather precise idea of the whole field and its potential. Of course each line of work is dealt with in a survey-like style, where some details may be neglected in favor of coverage. However, the extensive bibliography of each chapter will help the interested readers to find suitable sources for the missing details. Each chapter of the handbook is intended to be a self-contained survey of a topic, and is written by one or more authors who are leading researchers in the area. The intended audience of the handbook is researchers, graduate students, higher-year undergraduates and practitioners who wish to learn about the state-of-the-art in constraint programming. No prior knowledge about the field is necessary to be able to read the chapters and gather useful knowledge. Researchers from other fields should find in this handbook an effective way to learn about constraint programming and to possibly use some of the constraint programming concepts and techniques in their work, thus providing a means for a fruitful cross-fertilization among different research areas. The handbook is organized in two parts. The first part covers the basic foundations of constraint programming, including the history, the notion of constraint propagation, basic search methods, global constraints, tractability and computational complexity, and important issues in modeling a problem as a constraint problem. The second part covers constraint languages and solver, several useful extensions to the basic framework (such as interval constraints, structured domains, and distributed CSPs), and successful application areas for constraint programming. - Covers the whole field of constraint programming - Survey-style chapters - Five chapters on applications Table of Contents Foreword (Ugo Montanari) Part I : Foundations Chapter 1. Introduction (Francesca Rossi, Peter van Beek, Toby Walsh) Chapter 2. Constraint Satisfaction: An Emerging Paradigm (Eugene C. Freuder, Alan K. Mackworth) Chapter 3. Constraint Propagation (Christian Bessiere) Chapter 4. Backtracking Search Algorithms (Peter van Beek) Chapter 5. Local Search Methods (Holger H. Hoos, Edward Tsang) Chapter 6. Global Constraints (Willem-Jan van Hoeve, Irit Katriel) Chapter 7. Tractable Structures for CSPs (Rina Dechter) Chapter 8. The Complexity of Constraint Languages (David Cohen, Peter Jeavons) Chapter 9. Soft Constraints (Pedro Meseguer, Francesca Rossi, Thomas Schiex) Chapter 10. Symmetry in Constraint Programming (Ian P. Gent, Karen E. Petrie, Jean-Francois Puget) Chapter 11. Modelling (Barbara M. Smith) Part II : Extensions, Languages, and Applications Chapter 12. Constraint Logic Programming (Kim Marriott, Peter J. Stuckey, Mark Wallace) Chapter 13. Constraints in Procedural and Concurrent Languages (Thom Fruehwirth, Laurent Michel, Christian Schulte) Chapter 14. Finite Domain Constraint Programming Systems (Christian Schulte, Mats Carlsson) Chapter 15. Operations Research Methods in Constraint Programming (John Hooker) Chapter 16. Continuous and Interval Constraints(Frederic Benhamou, Laurent Granvilliers) Chapter 17. Constraints over Structured Domains (Carmen Gervet) Chapter 18. Randomness and Structure (Carla Gomes, Toby Walsh) Chapter 19. Temporal CSPs (Manolis Koubarakis) Chapter 20. Distributed Constraint Programming (Boi Faltings) Chapter 21. Uncertainty and Change (Kenneth N. Brown, Ian Miguel) Chapter 22. Constraint-Based Scheduling and Planning (Philippe Baptiste, Philippe Laborie, Claude Le Pape, Wim Nuijten) Chapter 23. Vehicle Routing (Philip Kilby, Paul Shaw) Chapter 24. Configuration (Ulrich Junker) Chapter 25. Constraint Applications in Networks (Helmut Simonis) Chapter 26. Bioinformatics and Constraints (Rolf Backofen, David Gilbert)}
}

@article{JAFFAR1994503,
title = {Constraint logic programming: a survey},
journal = {The Journal of Logic Programming},
volume = {19-20},
pages = {503-581},
year = {1994},
note = {Special Issue: Ten Years of Logic Programming},
issn = {0743-1066},
doi = {https://doi.org/10.1016/0743-1066(94)90033-7},
url = {https://www.sciencedirect.com/science/article/pii/0743106694900337},
author = {Joxan Jaffar and Michael J. Maher},
abstract = {Constraint Logic Programming (CLP) is a merger of two declarative paradigms: constraint solving and logic programming. Although a relatively new field, CLP has progressed in several quite different directions. In particular, the early fundamental concepts have been adapted to better serve in different areas of applications. In this survey of CLP, a primary goal is to give a systematic description of the major trends in terms of common fundamental concepts. The three main parts cover the theory, implementation issues, and programming for applications.}
}

@misc{SWI-Prolog,
  author = {Jan Wielemaker},
  title = {SWI Prolog},
  year = {1987},
  url = {https://www.swi-prolog.org/}
}

@inproceedings{Triska12,
  author    = {Markus Triska},
  title     = {The Finite Domain Constraint Solver of {SWI-Prolog}},
  booktitle = {FLOPS},
  series    = {LNCS},
  volume    = {7294},
  year      = {2012},
  pages     = {307-316}
}

@inproceedings{Triska2016,
  author    = "Markus Triska",
  title     = "The {Boolean} Constraint Solver of {SWI-Prolog}:
               System Description",
  booktitle = "FLOPS",
  series    = "LNCS",
  volume    = 9613,
  year      = 2016,
  pages     = "45--61"
}

@article{Triska2018,
  title = "Boolean constraints in {SWI-Prolog}:
           A comprehensive system description",
  journal = "Science of Computer Programming",
  volume = "164",
  pages = "98 - 115",
  year = "2018",
  note = "Special issue of selected papers from FLOPS 2016",
  issn = "0167-6423",
  doi = "https://doi.org/10.1016/j.scico.2018.02.001",
  url = "http://www.sciencedirect.com/science/article/pii/S0167642318300273",
  author = "Markus Triska",
  keywords = "CLP(B), Boolean unification, Decision diagrams, BDD"
}
